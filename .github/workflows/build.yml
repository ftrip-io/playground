name: CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/ftrip.io.playground/.nuget/packages

    steps:
      - name: Setup .NET Core
        shell: bash
        run: |
          dotnet tool install --global JetBrains.dotCover.GlobalTool

      - name: Setup dotcover
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 3.1

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: "zulu" # Alternative distribution options are available.

      - uses: actions/checkout@v3

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir ./.sonar
          mkdir ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - uses: actions/cache@v3
        with:
          path: ${{ env.NUGET_PACKAGES }}
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: restore packages
        working-directory: ftrip.io.playground
        shell: bash
        run: |
          dotnet restore /p:Configuration=Release ftrip.io.playground.sln

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"ftrip-io_playground" /o:"ftrip-io" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vstest.reportsPaths=TestResults/*.trx /d:sonar.cs.opencover.reportsPaths=TestResults/*/coverage.opencover.xml /d:sonar.coverage.exclusions="**Test*.cs" /d:sonar.cs.dotcover.reportsPaths=coverage/dotCover.Output.html
          dotnet publish ftrip.io.playground/ftrip.io.framework-playground/ftrip.io.framework-playground.csproj --no-restore -c Release -o out
          dotnet test ftrip.io.playground/ftrip.io.framework-playground.unit-tests/ftrip.io.framework-playground.unit-tests.csproj --collect:"XPlat Code Coverage" --results-directory TestResults/ --logger "trx;LogFileName=unittests.trx" -c Release -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          dotnet dotcover test ftrip.io.playground/ftrip.io.framework-playground.unit-tests/ftrip.io.framework-playground.unit-tests.csproj -c Release --dcReportType=HTML
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: always()
        with:
          files: |
            TestResults/**/*.trx

      # - name: publich app
      #   working-directory: ftrip.io.playground2
      #   shell: bash
      #   run: |
      #     # dotnet publish --source=.nuget/packages -c Release -o out

      - name: zip out
        shell: bash
        run: |
          zip -r coverage.zip ./coverage

      - name: upload out artifact
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: coverage.zip

      # - name: Build docker image
      #   working-directory: ftrip.io.playground
      #   shell: bash
      #   run: |
      #     docker build -t ftrip.io.playground .
